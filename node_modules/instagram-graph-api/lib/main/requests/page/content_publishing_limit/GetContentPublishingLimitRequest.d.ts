import { AxiosResponse } from 'axios';
import { ContentPublishingLimitFields } from '../../../Enums';
import { AbstractRequest } from '../../AbstractRequest';
import { ContentPublishingLimitData } from '../../data/ContentPublishingLimitData';
import { GetContentPublishingLimitResponse } from './GetContentPublishingLimitResponse';
/**
 * A request that gets the content publishing limit of a page.
 *
 * @author Tiago Grosso <tiagogrosso99@gmail.com>
 * @since 1.6.0
 */
export declare class GetContentPublishingLimitRequest extends AbstractRequest<GetContentPublishingLimitResponse> {
    /**
     * The page id.
     */
    private readonly pageId;
    /**
     * The constructor.
     *
     * @param accessToken the access token.
     * @param pageId the page id.
     * @param fields the fields to retrieve.
     */
    constructor(accessToken: string, pageId: string, ...fields: ContentPublishingLimitFields[]);
    /**
     * @inheritdoc
     */
    protected parseResponse(response: AxiosResponse<{
        data: ContentPublishingLimitData[];
    }>): GetContentPublishingLimitResponse;
    /**
     * @inheritdoc
     */
    protected url(): string;
    /**
     * @inheritdoc
     */
    addRange(_since: Date, _until: Date): void;
    /**
     * @inheritdoc
     */
    withRange(_since: Date, _until: Date): this;
    /**
     * Adds the `since` param to the request.
     *
     * @param date the date. Must be, at most, 1 day ago.
     *
     * @throws {DateOlderThanOneDay} if the date is not at most 1 day ago.
     *
     * @returns this request, for chained invocation.
     */
    since(date: Date): this;
}
/**
 * An error class for invalid dates when querying the content publishing limit.
 *
 * @author Tiago Grosso <tiagogrosso99@gmail.com>
 * @since 1.6.0
 */
export declare class DateOlderThanOneDay extends Error {
    /**
     * The constructor.
     *
     * @param date the date.
     */
    constructor(date: Date);
}
